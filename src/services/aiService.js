// Service d'IA pour l'analyse p√©dagogique des documents
class AIService {
  constructor() {
    this.apiKey = import.meta.env.VITE_OPENAI_API_KEY
    this.baseURL = 'https://api.openai.com/v1'
    this.model = 'gpt-4-turbo-preview' // ou 'gpt-3.5-turbo' pour les tests
    this.maxTokens = 4000
    this.temperature = 0.7
  }

  // V√©rifier la configuration
  isConfigured() {
    return !!this.apiKey
  }

  // Appel API g√©n√©rique
  async callAPI(messages, options = {}) {
    if (!this.isConfigured()) {
      throw new Error('Cl√© API OpenAI non configur√©e')
    }

    const response = await fetch(`${this.baseURL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: options.model || this.model,
        messages,
        max_tokens: options.maxTokens || this.maxTokens,
        temperature: options.temperature || this.temperature,
        stream: false
      })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error?.message || 'Erreur API OpenAI')
    }

    const data = await response.json()
    return data.choices[0].message.content
  }

  // Analyser le contenu d'un document
  async analyzeDocument(content, options = {}) {
    const systemPrompt = `Tu es un expert p√©dagogique sp√©cialis√© dans l'analyse de documents √©ducatifs. 
    Ton r√¥le est d'analyser le contenu fourni et d'extraire les √©l√©ments p√©dagogiques essentiels.
    
    Instructions :
    1. Identifie le sujet principal et le niveau de difficult√©
    2. Extrais les concepts cl√©s et d√©finitions importantes
    3. Rep√®re les relations entre les concepts
    4. Identifie les formules, th√©or√®mes ou r√®gles importantes
    5. Structure l'information de mani√®re logique
    
    Format de r√©ponse attendu (JSON) :
    {
      "subject": "Sujet principal",
      "level": "Niveau (d√©butant/interm√©diaire/avanc√©)",
      "keyConcepts": [
        {
          "name": "Nom du concept",
          "definition": "D√©finition claire",
          "importance": "haute/moyenne/faible"
        }
      ],
      "structure": [
        {
          "title": "Titre de section",
          "summary": "R√©sum√© de la section",
          "concepts": ["concept1", "concept2"]
        }
      ],
      "formulas": [
        {
          "name": "Nom de la formule",
          "formula": "Formule math√©matique",
          "description": "Explication"
        }
      ]
    }`

    const userPrompt = `Analyse ce document p√©dagogique et extrait les √©l√©ments essentiels :
    
    ${content}
    
    R√©ponds uniquement en JSON valide, sans texte suppl√©mentaire.`

    try {
      const response = await this.callAPI([
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ], options)

      return JSON.parse(response)
    } catch (error) {
      console.error('Erreur lors de l\'analyse du document:', error)
      throw new Error('Erreur lors de l\'analyse du document')
    }
  }

  // G√©n√©rer un r√©sum√© p√©dagogique
  async generateSummary(analysis, options = {}) {
    const systemPrompt = `Tu es un expert p√©dagogique qui cr√©e des r√©sum√©s clairs et structur√©s.
    Cr√©e un r√©sum√© p√©dagogique bas√© sur l'analyse fournie.
    
    Le r√©sum√© doit :
    - √ätre structur√© par sections logiques
    - Utiliser un langage clair et accessible
    - Mettre en √©vidence les points importants
    - Inclure des exemples si pertinent
    - √ätre adapt√© au niveau identifi√©
    
    Format de r√©ponse attendu (JSON) :
    {
      "title": "Titre du r√©sum√©",
      "overview": "Aper√ßu g√©n√©ral en 2-3 phrases",
      "sections": [
        {
          "title": "Titre de section",
          "content": "Contenu de la section",
          "keyPoints": ["Point cl√© 1", "Point cl√© 2"]
        }
      ],
      "conclusion": "Conclusion et points √† retenir"
    }`

    const userPrompt = `G√©n√®re un r√©sum√© p√©dagogique bas√© sur cette analyse :
    
    ${JSON.stringify(analysis, null, 2)}
    
    R√©ponds uniquement en JSON valide.`

    try {
      const response = await this.callAPI([
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ], options)

      return JSON.parse(response)
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du r√©sum√©:', error)
      throw new Error('Erreur lors de la g√©n√©ration du r√©sum√©')
    }
  }

  // G√©n√©rer des flashcards
  async generateFlashcards(analysis, count = 10, options = {}) {
    const systemPrompt = `Tu es un expert en cr√©ation de flashcards p√©dagogiques.
    Cr√©e des flashcards de qualit√© bas√©es sur l'analyse fournie.
    
    Les flashcards doivent :
    - Couvrir les concepts les plus importants
    - Avoir des questions claires et pr√©cises
    - Avoir des r√©ponses compl√®tes mais concises
    - √ätre vari√©es (d√©finitions, applications, comparaisons)
    - √ätre adapt√©es au niveau identifi√©
    
    Format de r√©ponse attendu (JSON) :
    {
      "flashcards": [
        {
          "question": "Question claire",
          "answer": "R√©ponse compl√®te",
          "category": "d√©finition/application/comparaison",
          "difficulty": "facile/moyen/difficile",
          "concept": "Concept principal abord√©"
        }
      ]
    }`

    const userPrompt = `G√©n√®re ${count} flashcards de qualit√© bas√©es sur cette analyse :
    
    ${JSON.stringify(analysis, null, 2)}
    
    R√©ponds uniquement en JSON valide.`

    try {
      const response = await this.callAPI([
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ], options)

      return JSON.parse(response)
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration des flashcards:', error)
      throw new Error('Erreur lors de la g√©n√©ration des flashcards')
    }
  }

  // G√©n√©rer des QCM
  async generateQuiz(analysis, count = 10, options = {}) {
    const systemPrompt = `Tu es un expert en cr√©ation de QCM p√©dagogiques.
    Cr√©e des QCM de qualit√© bas√©es sur l'analyse fournie.
    
    Les QCM doivent :
    - Avoir 4 choix de r√©ponse (A, B, C, D)
    - Avoir une seule bonne r√©ponse
    - Avoir des distracteurs plausibles mais incorrects
    - Couvrir diff√©rents niveaux de difficult√©
    - √ätre claires et sans ambigu√Øt√©
    - Inclure une explication pour la bonne r√©ponse
    
    Format de r√©ponse attendu (JSON) :
    {
      "questions": [
        {
          "question": "Question claire",
          "options": {
            "A": "Option A",
            "B": "Option B",
            "C": "Option C",
            "D": "Option D"
          },
          "correctAnswer": "A",
          "explanation": "Explication de la bonne r√©ponse",
          "difficulty": "facile/moyen/difficile",
          "category": "d√©finition/application/analyse"
        }
      ]
    }`

    const userPrompt = `G√©n√®re ${count} questions QCM de qualit√© bas√©es sur cette analyse :
    
    ${JSON.stringify(analysis, null, 2)}
    
    R√©ponds uniquement en JSON valide.`

    try {
      const response = await this.callAPI([
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ], options)

      return JSON.parse(response)
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du QCM:', error)
      throw new Error('Erreur lors de la g√©n√©ration du QCM')
    }
  }

  // Traitement complet d'un document
  async processDocument(content, options = {}) {
    try {
      console.log('üöÄ D√©but du traitement IA du document...')
      
      // √âtape 1: Analyse du document
      console.log('üìä Analyse du document...')
      const analysis = await this.analyzeDocument(content, options)
      
      // √âtape 2: G√©n√©ration du r√©sum√©
      console.log('üìù G√©n√©ration du r√©sum√©...')
      const summary = await this.generateSummary(analysis, options)
      
      // √âtape 3: G√©n√©ration des flashcards
      console.log('üÉè G√©n√©ration des flashcards...')
      const flashcards = await this.generateFlashcards(analysis, options.flashcardCount || 10, options)
      
      // √âtape 4: G√©n√©ration du QCM
      console.log('‚ùì G√©n√©ration du QCM...')
      const quiz = await this.generateQuiz(analysis, options.quizCount || 10, options)
      
      console.log('‚úÖ Traitement IA termin√© avec succ√®s!')
      
      return {
        analysis,
        summary,
        flashcards: flashcards.flashcards,
        quiz: quiz.questions,
        metadata: {
          processedAt: new Date().toISOString(),
          model: this.model,
          contentLength: content.length,
          options
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement IA:', error)
      throw error
    }
  }

  // Traitement par chunks pour les gros documents
  async processLargeDocument(content, chunkSize = 3000, options = {}) {
    // D√©couper le contenu en chunks
    const chunks = this.splitIntoChunks(content, chunkSize)
    
    console.log(`üìÑ Document d√©coup√© en ${chunks.length} chunks`)
    
    const results = []
    
    for (let i = 0; i < chunks.length; i++) {
      console.log(`üîÑ Traitement du chunk ${i + 1}/${chunks.length}`)
      
      try {
        const chunkResult = await this.processDocument(chunks[i], {
          ...options,
          chunkIndex: i,
          totalChunks: chunks.length
        })
        
        results.push(chunkResult)
        
        // Pause entre les chunks pour √©viter les rate limits
        if (i < chunks.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000))
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors du traitement du chunk ${i + 1}:`, error)
        throw error
      }
    }
    
    // Fusionner les r√©sultats
    return this.mergeResults(results)
  }

  // D√©couper le contenu en chunks
  splitIntoChunks(content, chunkSize) {
    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0)
    const chunks = []
    let currentChunk = ''
    
    for (const sentence of sentences) {
      if ((currentChunk + sentence).length > chunkSize && currentChunk.length > 0) {
        chunks.push(currentChunk.trim())
        currentChunk = sentence
      } else {
        currentChunk += (currentChunk ? '. ' : '') + sentence
      }
    }
    
    if (currentChunk.trim()) {
      chunks.push(currentChunk.trim())
    }
    
    return chunks
  }

  // Fusionner les r√©sultats de plusieurs chunks
  mergeResults(results) {
    // Logique de fusion des r√©sultats
    const merged = {
      analysis: {
        subject: results[0]?.analysis?.subject || 'Document',
        level: results[0]?.analysis?.level || 'interm√©diaire',
        keyConcepts: [],
        structure: [],
        formulas: []
      },
      summary: {
        title: 'R√©sum√© complet',
        overview: '',
        sections: [],
        conclusion: ''
      },
      flashcards: [],
      quiz: [],
      metadata: {
        processedAt: new Date().toISOString(),
        model: this.model,
        totalChunks: results.length,
        merged: true
      }
    }
    
    // Fusionner les concepts cl√©s
    const conceptMap = new Map()
    results.forEach(result => {
      result.analysis?.keyConcepts?.forEach(concept => {
        if (!conceptMap.has(concept.name)) {
          conceptMap.set(concept.name, concept)
        }
      })
    })
    merged.analysis.keyConcepts = Array.from(conceptMap.values())
    
    // Fusionner les sections
    results.forEach(result => {
      merged.summary.sections.push(...(result.summary?.sections || []))
    })
    
    // Fusionner les flashcards
    results.forEach(result => {
      merged.flashcards.push(...(result.flashcards || []))
    })
    
    // Fusionner les questions QCM
    results.forEach(result => {
      merged.quiz.push(...(result.quiz || []))
    })
    
    return merged
  }
}

// Instance singleton
export const aiService = new AIService()

// Export de la classe pour les tests
export { AIService }